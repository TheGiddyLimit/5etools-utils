{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "entry.json",

	"title": "Entry",
	"description": "A recursively renderable object.",
	"version": "1.9.12",

	"$defs" : {
		"_arrayOfSpell": {
			"type": "array",
			"uniqueItems": true,
			"items": {
				"oneOf": [
					{"type": "string"},
					{
						"type": "object",
						"properties": {
							"entry": {"type": "string"},
							"hidden": {"type": "boolean"}
						},
						"required": ["entry", "hidden"]
					}
				]
			}
		},

		"_entryDataStyle": {
			"type": "string", "enum":  ["inset", "narrow"]
		},

		"_entryDataData": {
			"description": "A generic object for storing special data for external use-cases. Keys prefixed with \"rd-\" should be added as \"data-\" HTML attributes when rendering to HTML.",
			"type": "object",

			"properties": {
				"genTables": {
					"type": "object",
					"properties": {
						"tableIgnore": {"const": true},
						"tableChapterIgnore": {"const": true},
						"tableInclude": {"const": true},
						"tableNamePrefix": {"type": "string"},
						"tableName": {"type": "string"},
						"skipSectionPrefix": {"const": true},

						"fauxGroupName": {"type": "string"},
						"fauxGroupSource": {"$ref": "util.json#/$defs/source"},
						"fauxGroupPage": {"$ref": "util.json#/$defs/page"},
						"isFauxGroupAdditional": {"const": true}
					},
					"additionalProperties": false,
					"minProperties": 1
				}
			}
		},

		"_entryTableColLabelItem": {
			"anyOf": [
				{"$ref": "#/$defs/entryTableHeaderCell"},
				{"type": "string"}
			]
		},

		"_entryStatblockBase": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "statblock"},
						"displayName": {"type": "string"},
						"source": {"$ref": "util.json#/$defs/source"},
						"hash": {"type": "string"},
						"style": {"$ref": "#/$defs/_entryDataStyle"},
						"collapsed": {"const": true}
					}
				}
			]
		},

		"mediaHrefInternal": {
			"type": "object",
			"properties": {
				"type": {"const": "internal"},
				"path": {
					"type": "string",
					"pattern": "\\.(webp|mp3)$"
				}
			},
			"required": ["path"],
			"additionalProperties": false
		},

		"mediaHrefExternal": {
			"type": "object",
			"properties": {
				"type": {"const": "external"},
				"url": {
					"$$merge": [
						{"$ref": "util.json#/$defs/url"},
						{
							"pattern": "^https?://",
							"not": {
								"pattern": "^https?://(5e\\.tools|5etools-mirror-\\d+\\.github\\.io|raw\\.githubusercontent\\.com\/5etools-mirror-\\d+)/"
							}
						}
					]
				}
			},
			"required": ["url"],
			"additionalProperties": false
		},

		"mediaHref": {
			"oneOf": [
				{"$ref": "#/$defs/mediaHrefInternal"},
				{"$ref": "#/$defs/mediaHrefExternal"}
			]
		},

		"entry": {
			"type": "object",
			"properties": {
				"name": {"type": "string"},
				"type": {"type": "string"},
				"source": {"$ref": "util.json#/$defs/source"},
				"page": {"$ref": "util.json#/$defs/page"},
				"$$ifSite": {
					"srd": {"$ref": "util.json#/$defs/srd"},
					"srd52": {"$ref": "util.json#/$defs/srd"},
					"basicRules": {"$ref": "util.json#/$defs/basicRules"},
					"basicRules2024": {"$ref": "util.json#/$defs/basicRules"}
				},
				"data": {"$ref": "#/$defs/_entryDataData"},
				"id": {"type": "string"}
			},
			"required": [
				"type"
			]
		},

		"entrySection": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "section"},
						"alias": {"$ref": "util.json#/$defs/alias"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						},
						"style": {"type": "string"}
					},
					"required": ["entries"],
					"additionalProperties": false
				}
			]
		},
		"entryEntries": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "entries"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						},
						"alias": {"$ref": "util.json#/$defs/alias"},
						"style": {"type": "string"}
					},
					"required": ["entries"],
					"additionalProperties": false
				}
			]
		},
		"$$ifBrew": {
			"entryHomebrew": {
				"type": "object",
				"$$merge": [
					{"$ref" : "#/$defs/entry"},
					{
						"properties": {
							"type": {"const": "homebrew"},
							"entries": {
								"type": "array",
								"items": {
									"$ref": "#"
								}
							},
							"movedTo": {
								"$ref": "#"
							},
							"oldEntries": {
								"type": "array",
								"items": {
									"$ref": "#"
								}
							}
						},
						"additionalProperties": false
					}
				]
			}
		},
		"entryQuote": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "quote"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						},
						"by": {
							"oneOf": [
								{"type": "string"},
								{
									"type": "array",
									"items": {"type": "string"}
								}
							]
						},
						"from": {
							"type": "string"
						},
						"skipMarks": {
							"description": "If the automatically-inserted quotation marks should be skipped.",
							"type": "boolean"
						},
						"skipItalics": {
							"type": "boolean"
						},
						"style": {
							"type": "string",
							"enum": [
								"quote-pull"
							]
						}
					},
					"required": ["entries"],
					"additionalProperties": false
				}
			]
		},
		"entryInlineEntries": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "inline"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["entries"],
					"additionalProperties": false
				}
			]
		},
		"entryEntriesInlineEntries": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "inlineBlock"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["entries"],
					"additionalProperties": false
				}
			]
		},
		"entryOptions": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "options"},
						"count": {
							"description": "Used to specify how many of the listed options can be chosen as e.g. permanent character features. Leave blank for transient choices.",
							"type": "integer"
						},
						"name": {"type": "string"},
						"style": {"type": "string"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["entries"],
					"additionalProperties": false
				}
			]
		},
		"entryTableBase": {
			"properties": {
				"caption": {"type" : "string"},
				"$$ifBrew": {
					"intro": {
						"description": "Primarily for homebrew use.",
						"type": "array",
						"items": {
							"$ref": "#"
						}
					},
					"outro": {
						"description": "Primarily for homebrew use.",
						"type": "array",
						"items": {
							"$ref": "#"
						}
					}
				},
				"isStriped": {"type": "boolean"},
				"isNameGenerator": {
					"type": "boolean",
					"description": "Uses the result rolled to construct a name from multiple columns, such as Prefix, Given, Family, Suffix names etc."
				},
				"style": {"type" : "string"},
				"colLabels": {
					"type": "array",
					"items": {"$ref": "#/$defs/_entryTableColLabelItem"}
				},
				"colLabelRows": {
					"type": "array",
					"items": {
						"type": "array",
						"items": {"$ref": "#/$defs/_entryTableColLabelItem"}
					},
					"minItems": 1
				},
				"colStyles": {
					"type": "array",
					"items": {"type" : "string"}
				},
				"rowLabels": {
					"type": "array",
					"items": {"type": "string"}
				},
				"rowStyles": {
					"type": "array",
					"items": {"type": "string"}
				},
				"rows": {
					"type": "array",
					"items": {
						"anyOf": [
							{
								"type": "array",
								"items": {
									"$ref": "#"
								}
							},
							{
								"$ref": "#/$defs/entryTableRow"
							}
						]
					}
				},
				"footnotes": {
					"type": "array",
					"items": {
						"$ref": "#"
					}
				}
			},
			"dependencies": {
				"colLabels": {"not": {"required": ["colLabelRows"]}},
				"colLabelRows": {"not": {"required": ["colLabels"]}}
			},
			"additionalProperties": false
		},
		"entryTable": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{"$ref" : "#/$defs/entryTableBase"},
				{
					"properties": {
						"type": {"const": "table"}
					},
					"required": ["rows"]
				}
			]
		},
		"entryTableGroup": {
			"description": "Used to group related tables together; has no effect on rendering.",
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "tableGroup"},
						"tables": {
							"type": "array",
							"items": {
								"$ref": "#/$defs/entryTable"
							}
						}
					},
					"required": ["tables"],
					"additionalProperties": false
				}
			]
		},
		"entryTableRow": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {
							"const": "row"
						},
						"style": {
							"type": "string"
						},
						"row": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["row"],
					"additionalProperties": false
				}
			]
		},
		"entryTableHeaderCell": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {
							"const": "cellHeader"
						},
						"width": {
							"type": "integer",
							"minimum": 2
						},
						"entry": {
							"type": "string"
						},
						"style": {
							"type": "string",
							"enum": [
								"th-skewer"
							]
						}
					},
					"required": ["entry"],
					"additionalProperties": false
				}
			]
		},
		"entryTableCell": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {
							"const": "cell"
						},
						"width": {
							"type": "integer"
						},
						"roll": {
							"oneOf": [
								{
									"type": "object",
									"properties": {
										"min": {"type": "integer"},
										"max": {"type": "integer"},
										"pad": {"type": "boolean"}
									},
									"required": ["min", "max"],
									"additionalProperties": false
								},
								{
									"type": "object",
									"properties": {
										"exact": {"type": "integer"},
										"pad": {"type": "boolean"}
									},
									"required": ["exact"],
									"additionalProperties": false
								}
							]
						},
						"entry": {
							"$ref": "#"
						}
					},
					"additionalProperties": false
				}
			]
		},
		"entryList": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "list"},
						"columns": {
							"description": "Number of columns the content should be split into. Note that the full value is only displayed on wide screens, and screens below certain widths will see an appropriately reduced number of columns.",
							"type": "integer"
						},
						"style": {
							"type": "string",
							"description": "Formatting to be applied to the list; not providing a style results in a simple bullet point list.\n- list-decimal: decimal numbering 1. 2. 3. etc\n- list-hang: a list with the bullets removed and a full indentation\n- list-hang-notitle: a list with no bullets that indents all lines but the first\n- list-lower-roman: lowercase roman numeral numbering i, ii, iii, iv, etc.\n- list-name: a bulleted list with all text in bold\n- list-no-bullets: a list with the bullets removed and reduced indentation",
							"enum": [
								"list-decimal",
								"list-hang",
								"list-hang-notitle",
								"list-hang-subtrait",
								"list-lower-roman",
								"list-upper-roman",
								"list-name",
								"list-no-bullets",
								"list-caption"
							]
						},
						"start": {"type": "integer"},
						"items": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["items"],
					"additionalProperties": false
				}
			]
		},
		"entryBonus": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "bonus"},
						"value": {
							"type": "integer"
						}
					},
					"required": ["value"],
					"additionalProperties": false
				}
			]
		},
		"entryBonusSpeed": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "bonusSpeed"},
						"value": {
							"type": "integer"
						}
					},
					"required": ["value"],
					"additionalProperties": false
				}
			]
		},
		"entryDice": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "dice"},
						"toRoll": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"number": {
										"type": "integer"
									},
									"faces": {
										"type": "integer"
									},
									"modifier": {
										"description": "(Warning: unused)",
										"type": "integer"
									},
									"hideModifier": {
										"description": "(Warning: unused)",
										"type": "boolean"
									}
								},
								"required": ["number", "faces"]
							}
						},
						"rollable": {
							"type": "boolean"
						}
					},
					"additionalProperties": false
				}
			]
		},
		"entryAbilityDc": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "abilityDc"},
						"attributes": {
							"type": "array",
							"items": {
								"type": "string",
								"$$switch_key": {
									"key_site": "enum",
									"key_ua": "enum",
									"key_brew": "examples",
									"value": ["str", "dex", "con", "int", "wis", "cha", "spellcasting"]
								}
							}
						}
					},
					"required": ["name", "attributes"],
					"additionalProperties": false
				}
			]
		},
		"entryAbilityAttackMod": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "abilityAttackMod"},
						"attributes": {
							"type": "array",
							"items": {
								"type": "string",
								"$$switch_key": {
									"key_site": "enum",
									"key_ua": "enum",
									"key_brew": "examples",
									"value": ["str", "dex", "con", "int", "wis", "cha", "spellcasting"]
								}
							}
						}
					},
					"required": ["name", "attributes"],
					"additionalProperties": false
				}
			]
		},
		"abilityGeneric": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "abilityGeneric"},
						"text": {
							"type": "string"
						},
						"attributes": {
							"type": "array",
							"items": {"$ref": "util.json#/$defs/abilityScoreAbbreviation"}
						}
					},
					"required": ["text"],
					"additionalProperties": false
				}
			]
		},
		"entryLink": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "link"},
						"text": {
							"type": "string"
						},
						"href": {
							"oneOf": [
								{
									"type": "object",
									"properties": {
										"type": {"const": "internal"},
										"path": {
											"type": "string"
										},
										"hash": {
											"type": "string"
										},
										"hashPreEncoded": {
											"type": "boolean"
										},
										"subhashes": {
											"type": "array",
											"items": {
												"oneOf": [
													{
														"type": "object",
														"properties": {
															"key": {
																"type": "string"
															},
															"values": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"preEncoded": {
																"type": "boolean"
															}
														},
														"required": ["key", "values"],
														"additionalProperties": false
													},
													{
														"type": "object",
														"properties": {
															"key": {
																"type": "string"
															},
															"value": {
																"type": "string"
															},
															"preEncoded": {
																"type": "boolean"
															}
														},
														"required": ["key", "value"],
														"additionalProperties": false
													}
												]
											}
										},
										"hover": {
											"type": "object",
											"properties": {
												"page": {"$ref": "util.json#/$defs/page"},
												"source": {"$ref": "util.json#/$defs/source"},
												"hash": {
													"description": "Optional; overrides the href hash for hover handlers.",
													"type": "string"
												},
												"hashPreEncoded": {
													"type": "boolean"
												}
											},
											"additionalProperties": false,
											"required": ["page", "source"]
										}
									},
									"required": ["path"],
									"additionalProperties": false
								},
								{"$ref": "#/$defs/mediaHrefExternal"}
							]
						}
					},
					"required": ["text", "href"],
					"additionalProperties": false
				}
			]
		},
		"entryOptFeature": {
			"description": "For e.g. Eldritch Invocations which require prerequisite text. Deprecated; prefer \"refOptionalfeature\" or \"statblock\" entries instead.",
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"deprecated": true,
						"type": {"const": "optfeature"},
						"prerequisite": {
							"type": "string"
						},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["name"],
					"additionalProperties": false
				}
			]
		},
		"entryInset": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "inset"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						},
						"style": {"type": "string"}
					},
					"required": ["entries"],
					"additionalProperties": false
				}
			]
		},
		"entryInsetReadaloud": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "insetReadaloud"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						},
						"style": {"type": "string"}
					},
					"required": ["entries"],
					"additionalProperties": false
				}
			]
		},
		"entryVariant": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "variant"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["name", "entries"],
					"additionalProperties": false
				}
			]
		},
		"entryVariantInner": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "variantInner"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["name", "entries"],
					"additionalProperties": false
				}
			]
		},
		"entryVariantSub": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "variantSub"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["name", "entries"],
					"additionalProperties": false
				}
			]
		},
		"entryItem": {
			"oneOf": [
				{
					"type": "object",
					"$$merge": [
						{"$ref" : "#/$defs/entry"},
						{
							"properties": {
								"type": {"const": "item"},
								"style": {"type": "string"},
								"entry": {
									"$ref": "#"
								},
								"nameDot": {
									"const": false
								}
							},
							"required": ["entry"],
							"additionalProperties": false
						}
					]
				},
				{
					"type": "object",
					"$$merge": [
						{"$ref" : "#/$defs/entry"},
						{
							"properties": {
								"type": {"const": "item"},
								"style": {"type": "string"},
								"entries": {
									"type": "array",
									"items": {
										"$ref": "#"
									}
								},
								"nameDot": {
									"const": false
								}
							},
							"required": ["entries"],
							"additionalProperties": false
						}
					]
				}
			]
		},
		"entryItemSub": {
			"oneOf": [
				{
					"type": "object",
					"$$merge": [
						{"$ref" : "#/$defs/entry"},
						{
							"properties": {
								"type": {"const": "itemSub"},
								"entry": {"$ref": "#"},
								"nameDot": {"const": false}
							},
							"required": ["entry"],
							"additionalProperties": false
						}
					]
				},
				{
					"type": "object",
					"$$merge": [
						{"$ref" : "#/$defs/entry"},
						{
							"properties": {
								"type": {"const": "itemSub"},
								"entries": {
									"type": "array",
									"items": {"$ref": "#"}
								},
								"nameDot": {"const": false}
							},
							"required": ["entries"],
							"additionalProperties": false
						}
					]
				}
			]
		},
		"entryItemSpell": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "itemSpell"},
						"entry": {
							"$ref": "#"
						}
					},
					"required": ["name", "entry"],
					"additionalProperties": false
				}
			]
		},
		"entryImage": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "image"},
						"href": {
							"$ref": "#/$defs/mediaHref"
						},
						"hrefThumbnail": {
							"title": "A thumbnail image used in rare cases, e.g. when loading a wall of maps to choose from in the DM Screen.",
							"$ref": "#/$defs/mediaHref"
						},
						"title": {"type": "string"},
						"credit": {"type": "string"},
						"altText": {
							"description": "For accessibility purposes",
							"type": "string"
						},
						"imageType": {
							"type": "string",
							"enum": [
								"map",
								"mapPlayer"
							]
						},
						"grid": {
							"type": "object",
							"properties": {
								"type": {
									"type": "string",
									"enum": [
										"none",
										"square",
										"hexRowsOdd",
										"hexRowsEven",
										"hexColsOdd",
										"hexColsEven"
									]
								},
								"size": {
									"description": "The size of a single grid square/hex, in pixels.",
									"type": "integer",
									"minimum": 50
								},
								"offsetX": {"type": "integer"},
								"offsetY": {"type": "integer"},
								"scale": {
									"description": "Map image scaling. Where possible, avoid using this, and use size/offset instead.",
									"type": "number"
								},
								"units": {
									"description": "A unit of measurement (e.g. \"feet\", \"miles\") in which the grid should be presented.",
									"type": "string",
									"$$switch_key": {
										"key_site": "enum",
										"key_ua": "enum",
										"key_brew": "examples",
										"value": [
											"feet",
											"yards",
											"miles",
											"meters",
											"kilometers"
										]
									}
								},
								"distance": {
									"description": "The number of units (e.g. feet) per grid square/hex.",
									"type": "number"
								}
							},
							"additionalProperties": false
						},
						"mapRegions": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"area": {
										"type": "string"
									},
									"points": {
										"type": "array",
										"items": {
											"type": "array",
											"items": {
												"type": "integer"
											},
											"maxItems": 2,
											"minItems": 2
										},
										"uniqueItems": true
									}
								},
								"additionalProperties": false
							}
						},
						"mapParent": {
							"description": "Note that the order of transformations is: scale, then offset.",
							"type": "object",
							"properties": {
								"id": {"type": "string"},
								"offsetX": {
									"description": "The X position of this map within the parent map. Defaults to 0.",
									"type": "integer"
								},
								"offsetY": {
									"description": "The Y position of this map within the parent map. Defaults to 0.",
									"type": "integer"
								},
								"scaleX": {
									"description": "X scaling required for this map to match the parent map. Defaults to 1.",
									"type": "number", "exclusiveMinimum": 0
								},
								"scaleY": {
									"description": "Y scaling required for this map to match the parent map. Defaults to 1.",
									"type": "number", "exclusiveMinimum": 0
								},
								"autoScale": {
									"description": "If the X/Y scaling for this map should be based on the size ratio between the two. This is often used a placeholder for maps requiring future manual adjustment.",
									"type": "boolean"
								}
							},
							"additionalProperties": false
						},
						"mapName": {"type": "string"},
						"width": {
							"type": "integer"
						},
						"height": {
							"type": "integer"
						},
						"maxWidth": {
							"description": "Specify the max desired display width of the images, as opposed to \"width\" which should only be used for the _real_ width. Assumes pixels by default.",
							"type": "integer"
						},
						"maxHeight": {
							"description": "As per \"maxWidth\"",
							"type": "integer"
						},
						"maxWidthUnits": {"type": "string"},
						"maxHeightUnits": {"type": "string"},
						"style": {
							"enum": ["comic-speaker-left", "comic-speaker-right", "deity-symbol"]
						},
						"expectsLightBackground": {
							"description": "If this image is largely transparent, and expects to be rendered atop a light background.",
							"type": "boolean",
							"const": true
						},
						"expectsDarkBackground": {
							"description": "If this image is largely transparent, and expects to be rendered atop a dark background.",
							"type": "boolean",
							"const": true
						},
						"$$ifBrew": {
							"foundrySceneRoot": {
								"description": "Additional data to be applied if/when the image is used to create a scene in Foundry.\n\nSome properties are forbidden, as they should be provided/are implicit in non-Foundry-specific data on the entry.",
								"type": "object",
								"properties": {
									"name": false,
									"width": false,
									"height": false,
									"background": false,
									"grid": false,
									"flags": false
								}
							},
							"foundrySceneWalls": {"$ref": "https://raw.githubusercontent.com/TheGiddyLimit/plutonium-scenes/main/test/schema/shared.json#/$defs/wallArray"},
							"foundrySceneLights": {"$ref": "https://raw.githubusercontent.com/TheGiddyLimit/plutonium-scenes/main/test/schema/shared.json#/$defs/lightArray"},
							"foundrySceneFlags": {"$ref": "util-foundry.json#/$defs/foundryFlagsObject"}
						}
					},
					"required": ["href"],
					"additionalProperties": false
				}
			]
		},
		"entryGallery": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "gallery"},
						"images": {
							"type": "array",
							"items": {
								"$ref": "#/$defs/entryImage"
							}
						}
					},
					"required": ["images"],
					"additionalProperties": false
				}
			]
		},
		"entryActions": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "actions"},
						"entries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": ["name", "entries"],
					"additionalProperties": false
				}
			]
		},
		"entryAttack": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "attack"},
						"attackType": {
							"type": "string",
							"description": "- MW: Melee Weapon\n- RW: Ranged Weapon",
							"enum": ["MW", "RW"]
						},
						"attackEntries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						},
						"hitEntries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						}
					},
					"required": [
						"attackType",
						"attackEntries",
						"hitEntries"
					],
					"additionalProperties": false
				}
			]
		},
		"entryFlowchart": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "flowchart"},
						"blocks": {
							"type": "array",
							"items": {
								"$ref" : "#/$defs/entry"
							}
						}
					},
					"required": ["blocks"],
					"additionalProperties": false
				}
			]
		},
		"entryFlowBlock": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "flowBlock"},
						"entries": {
							"type": "array",
							"items": {
								"$ref" : "#/$defs/entry"
							}
						}
					},
					"additionalProperties": false
				}
			]
		},
		"entryIngredient": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "ingredient"},
						"entry": {"$ref" : "#"}
					},
					"patternProperties": {
						"^amount\\d+$": {"type": "number"}
					},
					"required": ["entry"],
					"additionalProperties": false
				}
			]
		},
		"entryStatblockInline": {
			"anyOf": [
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "monster"
						},
						"data": {
							"$ref": "bestiary/bestiary.json#/$defs/creature"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "legendaryGroup"
						},
						"data": {
							"$ref": "bestiary/legendarygroups.json#/$defs/legendaryGroup"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "spell"
						},
						"data": {
							"$ref": "spells/spells.json#/$defs/spell"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "action"
						},
						"data": {
							"$ref": "actions.json#/$defs/action"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "item"
						},
						"data": {
							"$ref": "items.json#/$defs/item"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "background"
						},
						"data": {
							"$ref": "backgrounds.json#/$defs/background"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "charoption"
						},
						"data": {
							"$ref": "charcreationoptions.json#/$defs/charoption"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "condition"
						},
						"data": {
							"$ref": "conditionsdiseases.json#/$defs/condition"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "disease"
						},
						"data": {
							"$ref": "conditionsdiseases.json#/$defs/disease"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "status"
						},
						"data": {
							"$ref": "conditionsdiseases.json#/$defs/status"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "cult"
						},
						"data": {
							"$ref": "cultsboons.json#/$defs/cult"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "boon"
						},
						"data": {
							"$ref": "cultsboons.json#/$defs/boon"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "deity"
						},
						"data": {
							"$ref": "deities.json#/$defs/deity"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "feat"
						},
						"data": {
							"$ref": "feats.json#/$defs/feat"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "language"
						},
						"data": {
							"$ref": "languages.json#/$defs/language"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "object"
						},
						"data": {
							"$ref": "objects.json#/$defs/object"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "optionalfeature"
						},
						"data": {
							"$ref": "optionalfeatures.json#/$defs/optionalfeature"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "psionic"
						},
						"data": {
							"$ref": "psionics.json#/$defs/psionic"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "race"
						},
						"data": {
							"$ref": "races.json#/$defs/race"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "recipe"
						},
						"data": {
							"$ref": "recipes.json#/$defs/recipe"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "reward"
						},
						"data": {
							"$ref": "rewards.json#/$defs/reward"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "table"
						},
						"data": {
							"$ref": "tables.json#/$defs/tableData"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "trap"
						},
						"data": {
							"$ref": "trapshazards.json#/$defs/trap"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "hazard"
						},
						"data": {
							"$ref": "trapshazards.json#/$defs/hazard"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "variantrule"
						},
						"data": {
							"$ref": "variantrules.json#/$defs/variantrule"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "vehicle"
						},
						"data": {
							"$ref": "vehicles.json#/$defs/vehicle"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "vehicleUpgrade"
						},
						"data": {
							"$ref": "vehicles.json#/$defs/vehicleUpgrade"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "skill"
						},
						"data": {
							"$ref": "skills.json#/$defs/skill"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"type": {
							"const": "statblockInline"
						},
						"dependencies": {
							"$ref": "util.json#/$defs/metaDependenciesArray"
						},
						"dataType": {
							"const": "sense"
						},
						"data": {
							"$ref": "senses.json#/$defs/sense"
						},
						"style": {
							"$ref": "#/$defs/_entryDataStyle"
						},
						"collapsed": {
							"const": true
						}
					},
					"required": [
						"type",
						"dataType",
						"data"
					],
					"additionalProperties": false
				}
			]
		},
		"entryStatblock": {
			"oneOf": [
				{
					"type": "object",
					"$$merge": [
						{"$ref" : "#/$defs/_entryStatblockBase"},
						{
							"properties": {
								"tag": {"$ref": "util.json#/$defs/tagNameStats"},
								"name": {"type": "string"}
							},
							"required": ["tag", "name"],
							"additionalProperties": false
						}
					]
				},
				{
					"type": "object",
					"$$merge": [
						{"$ref" : "#/$defs/_entryStatblockBase"},
						{
							"properties": {
								"tag": {"const": "deity"},
								"name": {"type": "string"},
								"pantheon": {"type": "string"}
							},
							"required": ["tag", "name"],
							"additionalProperties": false
						}
					]
				},
				{
					"type": "object",
					"$$merge": [
						{"$ref" : "#/$defs/_entryStatblockBase"},
						{
							"properties": {
								"tag": {"$ref": "util.json#/$defs/tagNameStatsAbbreviation"},
								"abbreviation": {"type": "string"}
							},
							"required": ["tag", "abbreviation"],
							"additionalProperties": false
						}
					]
				},
				{
					"type": "object",
					"$$merge": [
						{"$ref" : "#/$defs/_entryStatblockBase"},
						{
							"properties": {
								"prop": {"$ref": "util.json#/$defs/propNameStats"},
								"name": {"type": "string"}
							},
							"required": ["prop", "name", "source"]
						}
					]
				}
			]
		},
		"entryRefClassFeature": {
			"description": "For use in classes page content only.",
			"type": "object",
			"properties": {
				"type": {"const": "refClassFeature"},
				"classFeature": {
					"type": "string"
				},
				"data": {"$ref": "#/$defs/_entryDataData"}
			},
			"required": [
				"type",
				"classFeature"
			],
			"additionalProperties": false
		},
		"entryRefSubclassFeature": {
			"description":"For use in classes page content only.",
			"type": "object",
			"properties": {
				"type": {"const": "refSubclassFeature"},
				"subclassFeature": {
					"type": "string"
				},
				"data": {"$ref": "#/$defs/_entryDataData"}
			},
			"required": [
				"type",
				"subclassFeature"
			],
			"additionalProperties": false
		},
		"entryRefOptionalfeature": {
			"description":"For use in classes page content only.",
			"type": "object",
			"properties": {
				"type": {"const": "refOptionalfeature"},
				"optionalfeature": {"type": "string"},
				"name": {"type": "string"},
				"preserve": {
					"type": "object",
					"properties": {
						"prerequisite": {"const": true},
						"consumes": {"const": true}
					},
					"additionalProperties": false
				},
				"data": {"$ref": "#/$defs/_entryDataData"}
			},
			"required": [
				"type",
				"optionalfeature"
			],
			"additionalProperties": false
		},
		"entryRefFeat": {
			"description":"For use in classes page content only.",
			"type": "object",
			"properties": {
				"type": {"const": "refFeat"},
				"feat": {"type": "string"},
				"name": {"type": "string"},
				"data": {"$ref": "#/$defs/_entryDataData"}
			},
			"required": [
				"type",
				"feat"
			],
			"additionalProperties": false
		},
		"entryHr": {
			"type": "object",
			"properties": {
				"type": {"const": "hr"}
			},
			"required": [
				"type"
			]
		},
		"entrySpellcasting": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "spellcasting"},
						"headerEntries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						},
						"constant": {
							"$ref": "#/$defs/_arrayOfSpell"
						},
						"will": {
							"$ref": "#/$defs/_arrayOfSpell"
						},
						"ritual": {
							"$ref": "#/$defs/_arrayOfSpell"
						},
						"rest": {
							"$ref": "#/$defs/entrySpellcasting_frequency"
						},
						"restLong": {
							"$ref": "#/$defs/entrySpellcasting_frequency"
						},
						"daily": {
							"$ref": "#/$defs/entrySpellcasting_frequency"
						},
						"weekly": {
							"$ref": "#/$defs/entrySpellcasting_frequency"
						},
						"monthly": {
							"$ref": "#/$defs/entrySpellcasting_frequency"
						},
						"yearly": {
							"$ref": "#/$defs/entrySpellcasting_frequency"
						},
						"charges": {
							"$ref": "#/$defs/entrySpellcasting_frequency"
						},
						"recharge": {
							"$ref": "#/$defs/entrySpellcasting_recharge"
						},
						"legendary": {
							"$ref": "#/$defs/entrySpellcasting_frequency"
						},
						"spells": {
							"type": "object",
							"properties": {
								"0": {
									"type": "object",
									"properties": {
										"spells": {
											"type": "array",
											"uniqueItems": true,
											"items": {
												"type": "string"
											}
										}
									},
									"required": [
										"spells"
									],
									"additionalProperties": false
								},
								"1": {
									"$ref": "#/$defs/entrySpellcasting_level1to9"
								},
								"2": {
									"$ref": "#/$defs/entrySpellcasting_level1to9"
								},
								"3": {
									"$ref": "#/$defs/entrySpellcasting_level1to9"
								},
								"4": {
									"$ref": "#/$defs/entrySpellcasting_level1to9"
								},
								"5": {
									"$ref": "#/$defs/entrySpellcasting_level1to9"
								},
								"6": {
									"$ref": "#/$defs/entrySpellcasting_level1to9"
								},
								"7": {
									"$ref": "#/$defs/entrySpellcasting_level1to9"
								},
								"8": {
									"$ref": "#/$defs/entrySpellcasting_level1to9"
								},
								"9": {
									"$ref": "#/$defs/entrySpellcasting_level1to9"
								}
							},
							"additionalProperties": false
						},
						"hidden": {
							"description": "Allows the above properties to be specified, but not rendered. Useful if e.g. a creature can only cast one spell, and this is rendered in the header line.",
							"type": "array",
							"items": {
								"type": "string",
								"enum": [
									"constant",
									"will",
									"rest",
									"restLong",
									"daily",
									"weekly",
									"monthly",
									"yearly",
									"ritual",
									"spells",
									"charges",
									"recharge",
									"legendary"
								]
							}
						},
						"footerEntries": {
							"type": "array",
							"items": {
								"$ref": "#"
							}
						},
						"ability": {"$ref": "util.json#/$defs/abilityScoreAbbreviation"},
						"displayAs": {
							"description": "Implicitly \"trait\"",
							"type": "string",
							"enum": ["trait", "action", "bonus", "reaction", "legendary", "mythic"]
						},
						"chargesItem": {
							"type": "string",
							"description": "The UID of an item which provides the charges required to cast any \"charges\" spells."
						}
					},
					"required": ["name"],
					"additionalProperties": false
				}
			]
		},
		"entrySpellcasting_level1to9": {
			"type": "object",
			"properties": {
				"lower": {
					"type": "number"
				},
				"slots": {
					"type": "number"
				},
				"spells": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				}
			},
			"required": [
				"spells"
			],
			"additionalProperties": false
		},
		"entrySpellcasting_frequency": {
			"type": "object",
			"properties": {
				"9e": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"9": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"8e": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"8": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"7e": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"7": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"6e": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"6": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"5e": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"5": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"4e": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"4": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"3e": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"3": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"2e": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"2": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"1e": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"1": {
					"$ref": "#/$defs/_arrayOfSpell"
				}
			},
			"additionalProperties": false
		},
		"entrySpellcasting_recharge": {
			"type": "object",
			"properties": {
				"6": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"5": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"4": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"3": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"2": {
					"$ref": "#/$defs/_arrayOfSpell"
				},
				"1": {
					"$ref": "#/$defs/_arrayOfSpell"
				}
			},
			"additionalProperties": false
		},
		"entryWrapped": {
			"type": "object",
			"$$merge": [
				{"$ref" : "#/$defs/entry"},
				{
					"properties": {
						"type": {"const": "wrapper"},
						"wrapped": {}
					},
					"required": ["wrapped"],
					"additionalProperties": false
				}
			]
		},


		"dataDamImmune": {
			"oneOf": [
				{
					"$ref": "util.json#/$defs/dataDamageType"
				},
				{
					"type": "object",
					"properties": {
						"special": {
							"type": "string"
						}
					},
					"additionalProperties": false,
					"required": ["special"]
				},
				{
					"type": "object",
					"properties": {
						"preNote": {
							"type": "string"
						},
						"immune": {
							"type": "array",
							"items": {
								"$ref": "#/$defs/dataDamImmune"
							}
						},
						"note": {
							"type": "string"
						}
					},
					"additionalProperties": false,
					"required": ["immune"]
				}
			]
		},
		"dataCondImmune": {
			"oneOf": [
				{
					"$ref": "util.json#/$defs/dataCondition"
				},
				{
					"type": "object",
					"properties": {
						"special": {
							"type": "string"
						}
					},
					"additionalProperties": false,
					"required": ["special"]
				},
				{
					"type": "object",
					"properties": {
						"preNote": {
							"type": "string"
						},
						"conditionImmune": {
							"type": "array",
							"items": {
								"$ref": "util.json#/$defs/dataCondition"
							}
						},
						"note": {
							"type": "string"
						}
					},
					"additionalProperties": false,
					"required": ["conditionImmune"]
				}
			]
		}
	},

	"anyOf": [
		{"$ref": "#/$defs/entrySection"},
		{"$ref": "#/$defs/entryEntries"},
		{"$$ifBrew_item": {"$ref": "#/$defs/entryHomebrew"}},
		{"$ref": "#/$defs/entryQuote"},
		{"$ref": "#/$defs/entryInlineEntries"},
		{"$ref": "#/$defs/entryEntriesInlineEntries"},
		{"$ref": "#/$defs/entryOptions"},
		{"$ref": "#/$defs/entryTableGroup"},
		{"$ref": "#/$defs/entryTable"},
		{"$ref": "#/$defs/entryTableRow"},
		{"$ref": "#/$defs/entryTableCell"},
		{"$ref": "#/$defs/entryList"},
		{"$ref": "#/$defs/entryBonus"},
		{"$ref": "#/$defs/entryBonusSpeed"},
		{"$ref": "#/$defs/entryDice"},
		{"$ref": "#/$defs/entryAbilityDc"},
		{"$ref": "#/$defs/entryAbilityAttackMod"},
		{"$ref": "#/$defs/abilityGeneric"},
		{"$ref": "#/$defs/entryLink"},
		{"$ref": "#/$defs/entryOptFeature"},
		{"$ref": "#/$defs/entryInset"},
		{"$ref": "#/$defs/entryInsetReadaloud"},
		{"$ref": "#/$defs/entryVariant"},
		{"$ref": "#/$defs/entryVariantInner"},
		{"$ref": "#/$defs/entryVariantSub"},
		{"$ref": "#/$defs/entryItem"},
		{"$ref": "#/$defs/entryItemSub"},
		{"$ref": "#/$defs/entryItemSpell"},
		{"$ref": "#/$defs/entryImage"},
		{"$ref": "#/$defs/entryGallery"},
		{"$ref": "#/$defs/entryActions"},
		{"$ref": "#/$defs/entryAttack"},
		{"$ref": "#/$defs/entryStatblockInline"},
		{"$ref": "#/$defs/entryStatblock"},
		{"$ref": "#/$defs/entryRefClassFeature"},
		{"$ref": "#/$defs/entryRefSubclassFeature"},
		{"$ref": "#/$defs/entryRefOptionalfeature"},
		{"$ref": "#/$defs/entryRefFeat"},
		{"$ref": "#/$defs/entryHr"},
		{"$ref": "#/$defs/entrySpellcasting"},
		{"$ref": "#/$defs/entryFlowchart"},
		{"$ref": "#/$defs/entryFlowBlock"},
		{"$ref": "#/$defs/entryIngredient"},
		{"$ref": "#/$defs/entryWrapped"},
		{"type": "string"},
		{"type": "integer"}
	]
}
