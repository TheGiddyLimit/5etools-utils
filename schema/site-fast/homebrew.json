{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"version": "1.11.2",
	"type": "object",
	"description": "Homebrew for 5etools. Should include arrays titled similarly to the main site data, e.g. `spell` or `class`",
	"$defs": {
		"wrappedAdventureBookDataArray": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"$ref": "util.json#/$defs/corpusId"
					},
					"source": {
						"$ref": "util.json#/$defs/source"
					},
					"data": {}
				},
				"required": [
					"id",
					"source",
					"data"
				],
				"additionalProperties": false
			},
			"minItems": 1,
			"uniqueItems": true
		},
		"_meta": {
			"description": "Metadata for the included data arrays",
			"type": "object",
			"properties": {
				"sources": {
					"type": "array",
					"items": {
						"type": "object",
						"description": "A set of properties describing a \"source.\" A source could be, for example, a homebrew PDF, book, or blog post.",
						"properties": {
							"json": {
								"$ref": "util.json#/$defs/sourceJson"
							},
							"abbreviation": {
								"type": "string",
								"description": "Abbreviated form of the source, to display on the site.",
								"markdownDescription": "Abbreviated form of the source, to display on the site."
							},
							"color": {
								"type": "string",
								"description": "HTML hex color code this source should use when displayed in lists, e.g. 'ff00ff'",
								"pattern": "^([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
								"markdownDescription": "HTML hex color code this source should use when displayed in lists, e.g. &apos;ff00ff&apos;"
							},
							"colorNight": {
								"type": "string",
								"description": "As \"color\", but for night mode themes",
								"pattern": "^([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
								"markdownDescription": "As &quot;color&quot;, but for night mode themes"
							},
							"full": {
								"type": "string",
								"description": "Full title of the source, to display on the site.",
								"markdownDescription": "Full title of the source, to display on the site."
							},
							"authors": {
								"type": "array",
								"description": "A list of authors who created the homebrew source.",
								"items": {
									"type": "string",
									"description": "Author name.",
									"markdownDescription": "Author name."
								},
								"markdownDescription": "A list of authors who created the homebrew source."
							},
							"convertedBy": {
								"type": "array",
								"description": "An optional list of people who contributed to converting the source to 5etools format.",
								"items": {
									"type": "string",
									"description": "Contributor name.",
									"markdownDescription": "Contributor name."
								},
								"markdownDescription": "An optional list of people who contributed to converting the source to 5etools format."
							},
							"dateReleased": {
								"type": "string",
								"format": "date",
								"description": "The date of release of the source, in the format YYYY-MM-DD (RFC3339).",
								"markdownDescription": "The date of release of the source, in the format YYYY-MM-DD (RFC3339)."
							},
							"version": {
								"type": "string",
								"description": "The source version, e.g. \"1.2.3\".",
								"markdownDescription": "The source version, e.g. &quot;1.2.3&quot;."
							},
							"url": {
								"type": "string",
								"description": "A direct link to the source, if available in web form or on a store.",
								"minLength": 3,
								"markdownDescription": "A direct link to the source, if available in web form or on a store."
							},
							"partnered": {
								"description": "If this is a \"partnered\" source; usually one which is shown under the \"Partnered\" section of \"https://www.dndbeyond.com/sources\".",
								"type": "boolean",
								"markdownDescription": "If this is a &quot;partnered&quot; source; usually one which is shown under the &quot;Partnered&quot; section of &quot;https://www.dndbeyond.com/sources&quot;."
							},
							"targetSchema": {
								"deprecated": true,
								"type": "string",
								"description": "The target schema version in 5etools, e.g. \"1.2.3\".",
								"markdownDescription": "The target schema version in 5etools, e.g. &quot;1.2.3&quot;."
							}
						},
						"required": [
							"json",
							"abbreviation",
							"full",
							"version"
						],
						"additionalProperties": false,
						"markdownDescription": "A set of properties describing a &quot;source.&quot; A source could be, for example, a homebrew PDF, book, or blog post."
					},
					"minItems": 1,
					"uniqueItems": true
				},
				"spellSchools": {
					"type": "object",
					"description": "Object names are spell school abbreviations (e.g. `\"X\"`); values should be objects with `\"full\"`` (used in the main entry, e.g. \"Evocation\") and `\"short\"` (used in the list view, e.g. `\"Evoc.\"`) key/values.",
					"patternProperties": {
						".*": {
							"type": "object",
							"properties": {
								"full": {
									"type": "string"
								},
								"short": {
									"type": "string"
								},
								"color": {
									"type": "string",
									"description": "HTML hex color code this source should use when displayed in lists, e.g. 'ff00ff'",
									"pattern": "^([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
									"markdownDescription": "HTML hex color code this source should use when displayed in lists, e.g. &apos;ff00ff&apos;"
								}
							},
							"required": [
								"full",
								"short"
							]
						}
					},
					"markdownDescription": "Object names are spell school abbreviations (e.g. &quot;X&quot;); values should be objects with &quot;full&quot; (used in the main entry, e.g. &quot;Evocation&quot;) and &quot;short&quot; (used in the list view, e.g. &quot;Evoc.&quot;) key/values."
				},
				"spellDistanceUnits": {
					"type": "object",
					"description": "Object names are spell distance units (e.g. `\"hectares\"`); values should be objects with optional `\"singular\"`` (singular form of the unit, e.g. \"foot\" for the singular of \"feet\"--if unspecified, a trailing \"s\" is removed from the plural version, if it exists, and the result is used as the singular form) and `\"feetPerUnit\"` (e.g. for a \"yards\" custom unit, this would be `3`, as there are three feet in a yard) key/values.",
					"patternProperties": {
						".*": {
							"type": "object",
							"properties": {
								"feetPerUnit": {
									"type": "number"
								},
								"singular": {
									"type": "string"
								}
							},
							"required": [
								"feetPerUnit"
							]
						}
					},
					"markdownDescription": "Object names are spell distance units (e.g. &quot;hectares&quot;); values should be objects with optional &quot;singular&quot; (singular form of the unit, e.g. &quot;foot&quot; for the singular of &quot;feet&quot;--if unspecified, a trailing &quot;s&quot; is removed from the plural version, if it exists, and the result is used as the singular form) and &quot;feetPerUnit&quot; (e.g. for a &quot;yards&quot; custom unit, this would be 3, as there are three feet in a yard) key/values."
				},
				"optionalFeatureTypes": {
					"type": "object",
					"description": "Object names are optional feature \"type\" shorthands (e.g. \"EI\" for \"Eldritch Invocation\" which will be displayed in the list view as a sortable column",
					"patternProperties": {
						".*": {
							"type": "string"
						}
					},
					"markdownDescription": "Object names are optional feature &quot;type&quot; shorthands (e.g. &quot;EI&quot; for &quot;Eldritch Invocation&quot; which will be displayed in the list view as a sortable column"
				},
				"featCategories": {
					"type": "object",
					"description": "Object names are feat \"category\" shorthands (e.g. \"O\" for \"Origin\" which will be displayed in the list view as a sortable column",
					"patternProperties": {
						".*": {
							"type": "string"
						}
					},
					"markdownDescription": "Object names are feat &quot;category&quot; shorthands (e.g. &quot;O&quot; for &quot;Origin&quot; which will be displayed in the list view as a sortable column"
				},
				"psionicTypes": {
					"type": "object",
					"description": "Object names are psionic type abbreviations (e.g. `\"X\"`); values should be objects with `\"full\"`` (used in the main entry, e.g. \"Greater Discipline\") and `\"short\"` (used in the list view, e.g. `\"G. Discipline\"`) key/values.",
					"patternProperties": {
						".*": {
							"type": "object",
							"properties": {
								"full": {
									"type": "string"
								},
								"short": {
									"type": "string"
								},
								"hasOrder": {
									"description": "If this type has a psionic order.",
									"type": "boolean",
									"markdownDescription": "If this type has a psionic order."
								},
								"isAltDisplay": {
									"description": "If this type should display its psionic type/order with the format \"Greater Discipline (Awakened)\" instead of the standard \"Awakened Greater Discipline\"",
									"type": "boolean",
									"markdownDescription": "If this type should display its psionic type/order with the format &quot;Greater Discipline (Awakened)&quot; instead of the standard &quot;Awakened Greater Discipline&quot;"
								}
							},
							"required": [
								"full",
								"short"
							]
						}
					},
					"markdownDescription": "Object names are psionic type abbreviations (e.g. &quot;X&quot;); values should be objects with &quot;full&quot; (used in the main entry, e.g. &quot;Greater Discipline&quot;) and &quot;short&quot; (used in the list view, e.g. &quot;G. Discipline&quot;) key/values."
				},
				"currencyConversions": {
					"type": "object",
					"description": "Keys should be uniquely-named value conversion objects, and can be referenced from item entities as \"currencyConversion\": \"<MyKey>\". The currency conversion info will then be used when rendering the value of the item.",
					"patternProperties": {
						".*": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"coin": {
										"type": "string",
										"description": "Coin abbreviation, e.g. \"gp\"",
										"markdownDescription": "Coin abbreviation, e.g. &quot;gp&quot;"
									},
									"mult": {
										"type": "number",
										"description": "A multiplier for converting copper to this currency, e.g. \"0.01\" for standard gold pieces",
										"markdownDescription": "A multiplier for converting copper to this currency, e.g. &quot;0.01&quot; for standard gold pieces"
									},
									"isFallback": {
										"type": "boolean",
										"description": "If true, this currency will be used as a fallback when the copper value of the item is a fractional value (e.g. a single ball bearing is worth 0.1 cp; marking gold as the fallback currency would have this be converted to gold).",
										"markdownDescription": "If true, this currency will be used as a fallback when the copper value of the item is a fractional value (e.g. a single ball bearing is worth 0.1 cp; marking gold as the fallback currency would have this be converted to gold)."
									}
								},
								"required": [
									"coin",
									"mult"
								]
							},
							"minItems": 1,
							"uniqueItems": true
						}
					},
					"markdownDescription": "Keys should be uniquely-named value conversion objects, and can be referenced from item entities as &quot;currencyConversion&quot;: &quot;&lt;MyKey&gt;&quot;. The currency conversion info will then be used when rendering the value of the item."
				},
				"dateAdded": {
					"type": "integer",
					"description": "The epoch timestamp (in seconds) when the homebrew was added to the repository. Not guaranteed to be anywhere near accurate.",
					"markdownDescription": "The epoch timestamp (in seconds) when the homebrew was added to the repository. Not guaranteed to be anywhere near accurate."
				},
				"dateLastModified": {
					"type": "integer",
					"description": "The epoch timestamp (in seconds) when the homebrew was last modified. Not guaranteed to be anywhere near accurate.",
					"markdownDescription": "The epoch timestamp (in seconds) when the homebrew was last modified. Not guaranteed to be anywhere near accurate."
				},
				"_dateLastModifiedHash": {
					"type": "string",
					"description": "A file hash used to automatically update the value of \"dateLastModified\". Should not be manually created/edited.",
					"minLength": 10,
					"maxLength": 10,
					"markdownDescription": "A file hash used to automatically update the value of &quot;dateLastModified&quot;. Should not be manually created/edited."
				},
				"dependencies": {
					"description": "A map of `\"<data property>\": [\"<JsonSource1>\", ..., \"<JsonSourceN>\"]`. Entities from these sources can then be extended/referenced in this file.\n\nNote: when copying classes/subclasses/class features/subclass features, the array should consist of \"<classIdentifier1>\", ..., \"<classIdentifierN>\" items, where \"classIdentifierN\" matches the keys in \"5etools/data/class/index.json\" (when copying class/etc. homebrew, normal \"source\"-based linking applies).",
					"type": "object",
					"patternProperties": {
						"^[a-zA-Z]+$": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"minItems": 1,
							"uniqueItems": true
						}
					},
					"markdownDescription": "A map of &quot;&lt;data property&gt;&quot;: [&quot;&lt;JsonSource1&gt;&quot;, ..., &quot;&lt;JsonSourceN&gt;&quot;]. Entities from these sources can then be extended/referenced in this file.\n\nNote: when copying classes/subclasses/class features/subclass features, the array should consist of &quot;&lt;classIdentifier1&gt;&quot;, ..., &quot;&lt;classIdentifierN&gt;&quot; items, where &quot;classIdentifierN&quot; matches the keys in &quot;5etools/data/class/index.json&quot; (when copying class/etc. homebrew, normal &quot;source&quot;-based linking applies)."
				},
				"includes": {
					"description": "Structure as per \"dependencies\". Additional sources to be included when loading the file.",
					"type": "object",
					"patternProperties": {
						"^[a-zA-Z]+$": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"minItems": 1,
							"uniqueItems": true
						}
					},
					"markdownDescription": "Structure as per &quot;dependencies&quot;. Additional sources to be included when loading the file."
				},
				"internalCopies": {
					"description": "An array of keys that are copied from within the current document. e.g. \"item\", \"monsterFluff\", \"background\" etc.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"minItems": 1,
					"uniqueItems": true,
					"markdownDescription": "An array of keys that are copied from within the current document. e.g. &quot;item&quot;, &quot;monsterFluff&quot;, &quot;background&quot; etc."
				},
				"fonts": {
					"description": "A map of \"font family\" to font URL.",
					"type": "object",
					"patternProperties": {
						"^[a-zA-Z0-9]+$": {
							"type": "string",
							"minLength": 3
						}
					},
					"markdownDescription": "A map of &quot;font family&quot; to font URL."
				},
				"unlisted": {
					"description": "If this homebrew file should be ignored/hidden by any indexer.",
					"const": true,
					"markdownDescription": "If this homebrew file should be ignored/hidden by any indexer."
				},
				"status": {
					"description": "An overall status for the homebrew.\n- \"ready\" indicates that this brew is ready for use, and is in an internally consistent state.\n- \"wip\" indicates that this brew is e.g. incomplete, or partially migrated between versions of the source document(s).\n- \"invalid\" indicates that using this brew is inadvisable, because while it is schema-passing, it breaks clients which attempt to use it.\n- \"deprecated\" indicates this brew is ready for use, but that using it is inadvisable, because e.g. it has been superseded by another brew.",
					"type": "string",
					"enum": [
						"ready",
						"wip",
						"invalid",
						"deprecated"
					],
					"markdownDescription": "An overall status for the homebrew.\n- &quot;ready&quot; indicates that this brew is ready for use, and is in an internally consistent state.\n- &quot;wip&quot; indicates that this brew is e.g. incomplete, or partially migrated between versions of the source document(s).\n- &quot;invalid&quot; indicates that using this brew is inadvisable, because while it is schema-passing, it breaks clients which attempt to use it.\n- &quot;deprecated&quot; indicates this brew is ready for use, but that using it is inadvisable, because e.g. it has been superseded by another brew."
				},
				"edition": {
					"description": "The rules edition this homebrew is compatible with. If ambiguous, \"classic\" should be specified.",
					"$ref": "util-edition.json#/$defs/edition",
					"markdownDescription": "The rules edition this homebrew is compatible with. If ambiguous, &quot;classic&quot; should be specified."
				}
			},
			"required": [
				"sources",
				"dateAdded",
				"dateLastModified",
				"edition"
			],
			"additionalProperties": false,
			"markdownDescription": "Metadata for the included data arrays"
		},
		"_test": {
			"description": "Supplementary information used when testing this homebrew.",
			"type": "object",
			"properties": {
				"additionalImageSources": {
					"description": "Other sources from which this homebrew should be allowed to use images.",
					"type": "array",
					"items": {
						"$ref": "util.json#/$defs/sourceJson"
					},
					"markdownDescription": "Other sources from which this homebrew should be allowed to use images."
				}
			},
			"minProperties": 1,
			"markdownDescription": "Supplementary information used when testing this homebrew."
		},
		"spellList": {
			"type": "array",
			"items": {
				"$ref": "#/$defs/_spellListItem"
			},
			"minItems": 1,
			"uniqueItems": true
		},
		"_spellListItem": {
			"oneOf": [
				{
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"source": {
							"$ref": "util.json#/$defs/source"
						},
						"spellListType": {
							"type": "string",
							"enum": [
								"groups"
							]
						},
						"spells": {
							"type": "array",
							"items": {
								"$ref": "util.json#/$defs/spellListSpellRef"
							},
							"minItems": 1,
							"uniqueItems": true
						}
					},
					"required": [
						"name",
						"source",
						"spellListType",
						"spells"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"source": {
							"$ref": "util.json#/$defs/source"
						},
						"spellListType": {
							"type": "string",
							"const": "variantClass"
						},
						"className": {
							"type": "string"
						},
						"classSource": {
							"$ref": "util.json#/$defs/source"
						},
						"spells": {
							"type": "array",
							"items": {
								"$ref": "util.json#/$defs/spellListSpellRef"
							},
							"minItems": 1,
							"uniqueItems": true
						}
					},
					"required": [
						"name",
						"source",
						"spellListType",
						"className",
						"classSource",
						"spells"
					],
					"additionalProperties": false
				}
			]
		}
	},
	"properties": {
		"_meta": {
			"$ref": "#/$defs/_meta"
		},
		"_test": {
			"$ref": "#/$defs/_test"
		},
		"$schema": {
			"description": "An optional key that allows you specify the schema you want to verify against in compatible IDEs.\n\nIt is advised that you leave this key out when submitting to the repo.",
			"type": "string",
			"examples": [
				"../_schema-fast/homebrew.json",
				"../_schema/homebrew.json",
				"https://raw.githubusercontent.com/TheGiddyLimit/5etools-utils/master/schema/brew-fast/homebrew.json",
				"https://raw.githubusercontent.com/TheGiddyLimit/5etools-utils/master/schema/brew/homebrew.json"
			],
			"markdownDescription": "An optional key that allows you specify the schema you want to verify against in compatible IDEs.\n\nIt is advised that you leave this key out when submitting to the repo."
		},
		"blocklist": {
			"description": "An array of objects to blocklist from display on the site.\n\nUse of this in public brew files is strongly discouraged.",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"displayName": {
						"type": "string"
					},
					"hash": {
						"type": "string",
						"description": "A unique reference for the removed item. Use the blocklist tool on the site to generate this.",
						"markdownDescription": "A unique reference for the removed item. Use the blocklist tool on the site to generate this."
					},
					"category": {
						"type": "string"
					},
					"source": {
						"anyOf": [
							{
								"$ref": "util.json#/$defs/source"
							},
							{
								"const": "*"
							}
						]
					}
				},
				"required": [
					"displayName",
					"hash",
					"category",
					"source"
				],
				"additionalProperties": false
			},
			"minItems": 1,
			"uniqueItems": true,
			"markdownDescription": "An array of objects to blocklist from display on the site.\n\nUse of this in public brew files is strongly discouraged."
		},
		"adventure": {
			"$ref": "adventures.json#/properties/adventure"
		},
		"adventureData": {
			"$ref": "#/$defs/wrappedAdventureBookDataArray"
		},
		"monster": {
			"$ref": "bestiary/bestiary.json#/properties/monster"
		},
		"monsterFluff": {
			"$ref": "bestiary/fluff-bestiary.json#/properties/monsterFluff"
		},
		"foundryMonster": {
			"$ref": "bestiary/foundry.json#/properties/monster"
		},
		"legendaryGroup": {
			"$ref": "bestiary/legendarygroups.json#/properties/legendaryGroup"
		},
		"book": {
			"$ref": "books.json#/properties/book"
		},
		"bookData": {
			"$ref": "#/$defs/wrappedAdventureBookDataArray"
		},
		"class": {
			"$ref": "class/class.json#/properties/class"
		},
		"classFluff": {
			"$ref": "class/fluff-class.json#/properties/classFluff"
		},
		"foundryClass": {
			"$ref": "class/foundry.json#/properties/class"
		},
		"subclass": {
			"$ref": "class/class.json#/properties/subclass"
		},
		"subclassFluff": {
			"$ref": "class/fluff-class.json#/properties/subclassFluff"
		},
		"foundrySubclass": {
			"$ref": "class/foundry.json#/properties/subclass"
		},
		"classFeature": {
			"$ref": "class/class.json#/properties/classFeature"
		},
		"subclassFeature": {
			"$ref": "class/class.json#/properties/subclassFeature"
		},
		"foundryClassFeature": {
			"$ref": "class/foundry.json#/properties/classFeature"
		},
		"foundrySubclassFeature": {
			"$ref": "class/foundry.json#/properties/subclassFeature"
		},
		"spell": {
			"$ref": "spells/spells.json#/properties/spell"
		},
		"spellFluff": {
			"$ref": "spells/fluff-spells.json#/properties/spellFluff"
		},
		"roll20Spell": {
			"description": "Based on the Roll20 JSON data, example available here: https://app.roll20.net/compendium/dnd5e/Spells:Fireball.json",
			"$ref": "spells/roll20.json#/properties/spell",
			"markdownDescription": "Based on the Roll20 JSON data, example available here: https://app.roll20.net/compendium/dnd5e/Spells:Fireball.json"
		},
		"foundrySpell": {
			"description": "Based on the Foundry VTT spell data, examples available here: https://gitlab.com/foundrynet/dnd5e/-/tree/master/packs/src/spells",
			"$ref": "spells/foundry.json#/properties/spell",
			"markdownDescription": "Based on the Foundry VTT spell data, examples available here: https://gitlab.com/foundrynet/dnd5e/-/tree/master/packs/src/spells"
		},
		"action": {
			"$ref": "actions.json#/properties/action"
		},
		"foundryAction": {
			"$ref": "foundry-actions.json#/properties/action"
		},
		"item": {
			"$ref": "items.json#/properties/item"
		},
		"foundryItem": {
			"$ref": "foundry-items.json#/properties/item"
		},
		"foundryMagicvariant": {
			"$ref": "foundry-items.json#/properties/magicvariant"
		},
		"itemGroup": {
			"$ref": "items.json#/properties/itemGroup"
		},
		"baseitem": {
			"$ref": "items-base.json#/properties/baseitem"
		},
		"itemProperty": {
			"$ref": "items-base.json#/properties/itemProperty"
		},
		"itemType": {
			"$ref": "items-base.json#/properties/itemType"
		},
		"itemEntry": {
			"$ref": "items-base.json#/properties/itemEntry"
		},
		"itemTypeAdditionalEntries": {
			"$ref": "items-base.json#/properties/itemTypeAdditionalEntries"
		},
		"itemMastery": {
			"$ref": "items-base.json#/properties/itemMastery"
		},
		"magicvariant": {
			"$ref": "magicvariants.json#/properties/magicvariant"
		},
		"linkedLootTables": {
			"$ref": "magicvariants.json#/properties/linkedLootTables"
		},
		"itemFluff": {
			"$ref": "fluff-items.json#/properties/itemFluff"
		},
		"background": {
			"$ref": "backgrounds.json#/properties/background"
		},
		"backgroundFluff": {
			"$ref": "fluff-backgrounds.json#/properties/backgroundFluff"
		},
		"foundryBackgroundFeature": {
			"$ref": "foundry-backgrounds.json#/properties/backgroundFeature"
		},
		"charoption": {
			"$ref": "charcreationoptions.json#/properties/charoption"
		},
		"charoptionFluff": {
			"$ref": "fluff-charcreationoptions.json#/properties/charoptionFluff"
		},
		"condition": {
			"$ref": "conditionsdiseases.json#/properties/condition"
		},
		"conditionFluff": {
			"$ref": "fluff-conditionsdiseases.json#/properties/conditionFluff"
		},
		"disease": {
			"$ref": "conditionsdiseases.json#/properties/disease"
		},
		"diseaseFluff": {
			"$ref": "fluff-conditionsdiseases.json#/properties/diseaseFluff"
		},
		"status": {
			"$ref": "conditionsdiseases.json#/properties/status"
		},
		"statusFluff": {
			"$ref": "fluff-conditionsdiseases.json#/properties/statusFluff"
		},
		"cult": {
			"$ref": "cultsboons.json#/properties/cult"
		},
		"boon": {
			"$ref": "cultsboons.json#/properties/boon"
		},
		"deity": {
			"$ref": "deities.json#/properties/deity"
		},
		"encounter": {
			"$ref": "encounters.json#/properties/encounter"
		},
		"feat": {
			"$ref": "feats.json#/properties/feat"
		},
		"featFluff": {
			"$ref": "fluff-feats.json#/properties/featFluff"
		},
		"foundryFeat": {
			"$ref": "foundry-feats.json#/properties/feat"
		},
		"language": {
			"$ref": "languages.json#/properties/language"
		},
		"languageFluff": {
			"$ref": "fluff-languages.json#/properties/languageFluff"
		},
		"makebrewCreatureTrait": {
			"$ref": "makebrew-creature.json#/properties/makebrewCreatureTrait"
		},
		"makebrewCreatureAction": {
			"$ref": "makebrew-creature.json#/properties/makebrewCreatureAction"
		},
		"reducedItemProperty": {
			"$ref": "makecards.json#/properties/reducedItemProperty"
		},
		"reducedItemType": {
			"$ref": "makecards.json#/properties/reducedItemType"
		},
		"monsterfeatures": {
			"$ref": "monsterfeatures.json#/properties/monsterfeatures"
		},
		"name": {
			"$ref": "names.json#/properties/name"
		},
		"object": {
			"$ref": "objects.json#/properties/object"
		},
		"objectFluff": {
			"$ref": "fluff-objects.json#/properties/objectFluff"
		},
		"optionalfeature": {
			"$ref": "optionalfeatures.json#/properties/optionalfeature"
		},
		"optionalfeatureFluff": {
			"$ref": "fluff-optionalfeatures.json#/properties/optionalfeatureFluff"
		},
		"foundryOptionalfeature": {
			"$ref": "foundry-optionalfeatures.json#/properties/optionalfeature"
		},
		"psionic": {
			"$ref": "psionics.json#/properties/psionic"
		},
		"foundryPsionicDisciplineFocus": {
			"$ref": "foundry-psionics.json#/properties/psionicDisciplineFocus"
		},
		"foundryPsionicDisciplineActive": {
			"$ref": "foundry-psionics.json#/properties/psionicDisciplineActive"
		},
		"race": {
			"$ref": "races.json#/properties/race"
		},
		"subrace": {
			"$ref": "races.json#/properties/subrace"
		},
		"foundryRace": {
			"$ref": "foundry-races.json#/properties/race"
		},
		"foundryRaceFeature": {
			"$ref": "foundry-races.json#/properties/raceFeature"
		},
		"raceFluff": {
			"$ref": "fluff-races.json#/properties/raceFluff"
		},
		"raceFluffMeta": {
			"$ref": "fluff-races.json#/properties/raceFluffMeta"
		},
		"recipe": {
			"$ref": "recipes.json#/properties/recipe"
		},
		"recipeFluff": {
			"$ref": "fluff-recipes.json#/properties/recipeFluff"
		},
		"reward": {
			"$ref": "rewards.json#/properties/reward"
		},
		"rewardFluff": {
			"$ref": "fluff-rewards.json#/properties/rewardFluff"
		},
		"foundryReward": {
			"$ref": "foundry-rewards.json#/properties/reward"
		},
		"table": {
			"$ref": "tables.json#/properties/table"
		},
		"trap": {
			"$ref": "trapshazards.json#/properties/trap"
		},
		"trapFluff": {
			"$ref": "fluff-trapshazards.json#/properties/trapFluff"
		},
		"hazard": {
			"$ref": "trapshazards.json#/properties/hazard"
		},
		"hazardFluff": {
			"$ref": "fluff-trapshazards.json#/properties/hazardFluff"
		},
		"variantrule": {
			"$ref": "variantrules.json#/properties/variantrule"
		},
		"vehicle": {
			"$ref": "vehicles.json#/properties/vehicle"
		},
		"vehicleUpgrade": {
			"$ref": "vehicles.json#/properties/vehicleUpgrade"
		},
		"foundryVehicleUpgrade": {
			"$ref": "foundry-vehicles.json#/properties/vehicleUpgrade"
		},
		"vehicleFluff": {
			"$ref": "fluff-vehicles.json#/properties/vehicleFluff"
		},
		"skill": {
			"$ref": "skills.json#/properties/skill"
		},
		"sense": {
			"$ref": "senses.json#/properties/sense"
		},
		"spellList": {
			"$ref": "#/$defs/spellList"
		},
		"deck": {
			"$ref": "decks.json#/properties/deck"
		},
		"card": {
			"$ref": "decks.json#/properties/card"
		},
		"citation": {
			"$ref": "citations.json#/properties/citation"
		},
		"facility": {
			"$ref": "bastions.json#/properties/facility"
		},
		"facilityFluff": {
			"$ref": "fluff-bastions.json#/properties/facilityFluff"
		}
	},
	"additionalProperties": false,
	"required": [
		"_meta"
	],
	"markdownDescription": "Homebrew for 5etools. Should include arrays titled similarly to the main site data, e.g. spell or class"
}